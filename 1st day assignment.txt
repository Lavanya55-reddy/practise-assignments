//instance variable program

public class Instancevariable
{
	//instance variables are declared inside the class or outside the methods

	int a=20;		//int Instance variable
	String name="lavanya";  //string Instance variable
	public void display()
	{
		System.out.println(a);
		System.out.println(name);
	}
	public static void main(String args[])
	{
		//to create an object for the class

		Instancevariable obj=new Instancevariable();

		//use dot operator to make the reference for the function within the class with the help of object

		obj.display();
	}
}





//static variable program

public class Staticvariable
{
	//static variables are declared by using static keyword
	//static variables are executed only once

	static int d=0; 	//static variable
	public void increment()
	{
		d++;
		System.out.println(d);
	}
	public static void main(String args[])
	{
		//to create an object for the class
		
		Staticvariable obj=new Staticvariable();
		
		//use dot operator to make the reference for the function within the class with the help of object

		obj.increment();	//in this d=0 to d=1 incremented
		obj.increment();	//in this d=1 to d=2 incremented
	}
}





differences between SonarQube and Sonar Lint:


 SonarQube:
1.SonarQube has a server associated with it
2. SonarQube is a central server that processes which covers full analyses which need to be triggered by the various SonarQube Scanners.
3.It concentrates on what you are writing run time while coding. It analyzes all the source code for all files in frequent interval.
4.SonarQube performs scans with 3rd party analyzers (stylecorp,findBugs, checkstyle, PMD)Â 
5.features of sonarQube
	1.write clean code
		i.overall health
		ii.enforce quality gate
		iii.analyze pull requests
		iv.dig into issues
	2.detect bugs
		i.detect bugs
		ii.code smells
		iii.security vulnerability
	3.multi-language
		i.20+ programming languages
		ii.multi-language projects
	4.centalize quality
		i.all projects in one place
		ii.shared rulesets

 SonarLint:
1.SonarLint works more like a plugin
2.SonarLint supports only in the IDE like IntelliJ, Eclipse and Visual Studio
3.It gives instant feedback as you type your code. It give a vision of the quality of your complete project code base.
4.SonarLint does not performs scans with 3rd party analyzers
5.features of soarli t
	1.instant view
	2.on-the-fly detection
	3.smart education
	4.push notifications




exmaples of smaple code:

public class samplecode
{
	public void ifstatement()
	{
		int a=2;
		if(a==2)//checking equality
		{
			System.out.println("if block executed");
		}
	}
	public void ifelsestatement()
	{
		int a=5;
		if(a>5)
		{
			System.out.println("if block executed");
		}
		else
		{
			System.out.println("else block executed");
		}
	}
	public void nestedifstatement()
	{
		int a=10;
		if(a==10)
			System.out.println("if block executed");
			if(a<=10)
				System.out.println("nested if block executed");
	}
	public void elseifstatement()
	{
		int a=5;
		if(a<4)
			System.out.println("if block executed");
		else if(a==5)
			System.out.println("else if block executed");
		else
			System.out.println("else block executed");
	}
	public void switchcase()
	{
		int a=3;
		switch(a)
		{
			case 1:System.out.println(" case 1 executed");
				break;
			case 2:System.out.println(" case 2 executed");
				break;
			case 3:System.out.println(" case 3 executed");
				break;
			default:System.out.println(" default case  executed");
		}
	}
	public void forloop()
	{
		for(int a=1;a<=10;a++)
		{
			System.out.println(a);
			a++;
		}
	}
	public void whileloop()
	{
		int a=5;
		while(a<5)
		{
			System.out.println(a);
			a++;
		}
	}
	public static void main(String args[])
	{
				
		samplecode ob=new samplecode();
		ob.ifstatement();
		ob.ifelsestatement();
		ob.nestedifstatement();
		ob.elseifstatement();
		ob.switchcase();
		ob.forloop();
		ob.whileloop();
	}
}






use continue and return in if else and switch case:

if else:
	
	public class ifcontinuereturn
	{
		public void continuestatement()
		{
			int a=10;
			while(a)
			{
				if(a==5)
				   continue;
				else
				   System.out.printf(a);
				   a--;
			}
		}
		public void returnstatemet()
		{
			int a=5;
			if(a>0)
				sysem.out.println(a);
				return;
			else
				sysem.out.println(a);
		}
		public static void main(String args[])
		{
			ifcontinuereturn ob=new ifcontinuereturn();
			ob.continuestatement();
			ob.returnstatemet();
		}
	}

switch case:
	
	public class switchcontinuereturn
	{
		public static void main(String args[])
		{
			int a=2;
			switch(a)
			{
				case 1:System.out.println("1");
					break;
				case 2:System.out.println("2");
					continue;
				case 3:System.out.println("3");
					return;
				default:System.out.println("default");
			}
		}
	}




ARRAYS in java programming:

public class arrays
{
	public static void main(String args[])
	{
		int a[];//one dimensional array
		a=new int[10]; //allocating memory to array
		for(int i=0;i<a.length;i++)
		{
			System.out.println(arr[i]+"="+i);
		}
		int b[][];//two dimensional array
		b=new int[10][10]; //allocating no.of rows and columns
		for(int i=1;i<b.length;i++)
		{
			for(int j=1;j<b.length;j++)
			{
				System.out.println(b[i][j]+"="+i+","+j);
			}
		}
	}
}

		
	
		









		
					           